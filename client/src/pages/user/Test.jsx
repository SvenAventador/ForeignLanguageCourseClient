import React from 'react';
import {getOne} from "../../http/test";
import {getOne as getOneChapter} from "../../http/chapter";
import {
    useNavigate,
    useParams
} from "react-router-dom";
import Swal from "sweetalert2";
import {createTest} from "../../http/userTest";
import {useUser} from "../../stores/UserStore";
import {CURRENT_COURSE_PATH} from "../../utils/consts";
import {useCourse} from "../../stores/CourseStore";

const Test = () => {
    const {id} = useParams();
    const [test, setTest] = React.useState({})
    const [answers, setAnswers] = React.useState({})
    const [chapter, setChapter] = React.useState({})
    const {user} = useUser()
    const {currentCourse} = useCourse()
    const navigate = useNavigate()
    React.useEffect(() => {
        getOne(id).then(({test}) => {
            setTest(test);

            test && getOneChapter(test.courseContentId).then(({chapter}) => {
                setChapter(chapter)
            })
        })
    }, [id])

    const handleAnswerChange = (questionId, answer) => {
        setAnswers(prevAnswers => ({
                ...prevAnswers,
                [questionId.toString()]: answer
            }
        ))
    }

    const handleSubmit = async () => {
        let totalScore = 0
        let answeredQuestions = Object.keys(answers).length

        if (answeredQuestions !== test.test_questions.length) {
            await Swal.fire({
                title: '–û–ø–∞—á–∫–∏...',
                text: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã. –¢—ã —É–º–Ω–∏–∫–∞ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞–≤–∏—à—å—Å—èüíù',
                icon: 'error'
            });
            return;
        }

        test.test_questions.forEach((question) => {
            if (answers[question.id.toString()] === question.test_answers.find(ans => ans.isCorrect).answer) {
                totalScore++;
            }
        })

        createTest(+totalScore, +test.id, +user.id).then((data) => {
            console.log(data)
            if (data.candidate) {
                Swal.fire({
                    title: data.candidate.isComplete
                        ?
                        '–í–Ω–∏–º–∞–Ω–∏–µ!'
                        :
                        '–û–ø–∞—á–∫–∏!',
                    text: data.candidate.isComplete
                        ?
                        '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–µ–π –≥–ª–∞–≤—ã!'
                        :
                        '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –¥–∞–Ω–Ω—É—é –≥–ª–∞–≤—É. ' +
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å –Ω–æ–≤—ã–º–∏ —Å–∏–ª–∞–º–∏! ' +
                        '–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤ –í–∞—Å –≤–µ—Ä–∏—Ç!',
                    icon: data.candidate.isComplete
                        ? 'success'
                        : 'info'
                }).then(() => {
                    navigate(`${CURRENT_COURSE_PATH}/${chapter.courseId}`)
                })
            } else if (data.userResult) {
                Swal.fire({
                    title: data.userResult.isComplete
                        ?
                        '–í–Ω–∏–º–∞–Ω–∏–µ!'
                        :
                        '–û–ø–∞—á–∫–∏!',
                    text: data.userResult.isComplete
                        ?
                        '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–µ–π –≥–ª–∞–≤—ã!'
                        :
                        '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –¥–∞–Ω–Ω—É—é –≥–ª–∞–≤—É. ' +
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å –Ω–æ–≤—ã–º–∏ —Å–∏–ª–∞–º–∏! ' +
                        '–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤ –í–∞—Å –≤–µ—Ä–∏—Ç!',
                    icon: data.userResult.isComplete
                        ? 'success'
                        : 'info'
                }).then(() => {
                    navigate(`${CURRENT_COURSE_PATH}/${chapter.courseId}`)
                })
            }
        })
    }

    return (
        <section className="test">
            <div className="test__container">
                {test && Object.keys(test).length > 0 ? (
                    <>
                        <h2 className="test__name">{test.testName}</h2>
                        {test.test_questions && test.test_questions.map((question) => (
                            <div className="test__question" key={question.id}>
                                <p className="test__question-text">{question.question}</p>
                                {question.test_answers && question.test_answers.map((answer) => (
                                    <div key={answer.id}>
                                        <input
                                            type="radio"
                                            name={`answer${question.id}`}
                                            value={answer.answer}
                                            onChange={() => handleAnswerChange(question.id, answer.answer)}
                                        />
                                        <label className="test__answer-label">{answer.answer}</label>
                                    </div>
                                ))}
                            </div>
                        ))}
                        <button className="btn-reset test__btn" onClick={handleSubmit}>
                            –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        </button>
                    </>
                ) : (
                    <p style={{
                        fontSize: '20pt',
                        fontFamily: 'Comic Sans MS'
                    }}>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –Ω–µ—Ç —Ç–µ—Å—Ç–∞ –∫ –≥–ª–∞–≤–µ. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–æ –≤—Å–µ–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—èü•∞ü•∞ü•∞</p>
                )}
            </div>
        </section>
    );
};

export default Test;